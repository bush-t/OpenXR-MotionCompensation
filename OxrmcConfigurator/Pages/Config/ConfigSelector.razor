@using OxrmcConfigurator.Model

@inject ConfigService ConfigService;

<MudSelect T="ConfigItem"
           Value = "@SelectedItem"
           ValueChanged="OnValueChanged"
           Label="Configuration"
           Variant="Variant.Filled"
           AnchorOrigin="Origin.BottomCenter">
	<MudSelectItem Value="_defaultItem" />
	@foreach (ConfigItem app in _applicationsList)
	{
		<MudSelectItem Value="@app"/>
	}
</MudSelect>


@if (SelectedItem is not null)
{
	<br/>
	<MudAlert Severity="Severity.Info">@(SelectedItem.name) was selected</MudAlert>
}

@code {

	[Parameter]
	public EventCallback<ConfigItem> OnItemChanged { get; set; }

	private ConfigItem? SelectedItem { get; set; }
	private static ConfigItem _defaultItem = new("OpenXR-MotionCompensation");
	private List<ConfigItem> _applicationsList = new();

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();
		_applicationsList = GetSortedNames();
		if (_applicationsList.Any())
			await OnValueChanged(_defaultItem);
	}

	private List<ConfigItem> GetSortedNames()
	{
		var nameList = ConfigService.GetAppNames();
		var appList = nameList.Select(name => new ConfigItem(name)).ToList().OrderBy(a => a.displayName).ToList();
		return appList;
	}

	private async Task OnValueChanged(ConfigItem selected)
	{
		SelectedItem = selected;
		if (OnItemChanged.HasDelegate)
		{
			await OnItemChanged.InvokeAsync(selected);
		}
	}

	// TODO: update list on delete and add refresh button

}