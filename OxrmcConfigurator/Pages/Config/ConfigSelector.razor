@using OxrmcConfigurator.Model
@using System.Text

@inject ConfigService ConfigService;
<MudPaper Class="d-flex flex-row" >
	<MudItem>
		<MudSelect T="ConfigItem"
		           Value="@SelectedItem"
		           ValueChanged="OnValueChanged"
		           Label="Configuration"
		           Variant="Variant.Filled"
		           AnchorOrigin="Origin.BottomCenter"
		           Class="flex-auto d-flex">
			<MudSelectItem Value="_defaultItem"/>
			@foreach (ConfigItem app in _applicationsList)
			{
				<MudSelectItem Value="@app" Style="@GetStyle(@app)" />
			}
		</MudSelect>
	</MudItem>
	<MudItem>
		<MudTooltip Delay="500" Text="Reload config files in appdata directory" Placement="Placement.Left">
			<MudIconButton Class="flex-none mud-theme-primary" Icon="@Icons.Material.Filled.Refresh" OnClick="ReloadConfigFiles"/>
		</MudTooltip>
	</MudItem>
</MudPaper>
	

	

@code {

	[Parameter]
	public EventCallback<ConfigItem> OnItemChanged { get; set; }

	private ConfigItem SelectedItem { get; set; } = new("");
	private static ConfigItem _defaultItem = new(Model.ConfigService.defaultApp);
	private List<ConfigItem> _applicationsList = new();

	private string GetStyle(ConfigItem item)
	{
		return ConfigService.IsModified(item.name) ? "border: 2px solid red" : "";
	}

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();
		_applicationsList = GetSortedNames();
		if (_applicationsList.Any())
			await OnValueChanged(_defaultItem);
	}

	private List<ConfigItem> GetSortedNames()
	{
		var nameList = ConfigService.GetAppNames();
		var appList = nameList.Select(name => new ConfigItem(name)).ToList().OrderBy(a => a.displayName).ToList();
		return appList;
	}

	private async Task OnValueChanged(ConfigItem selected)
	{
		SelectedItem = selected;
		if (OnItemChanged.HasDelegate)
		{
			await OnItemChanged.InvokeAsync(selected);
		}
	}

	private async Task ReloadConfigFiles()
	{
		ConfigService.ParseConfigFiles();
		_applicationsList = GetSortedNames();
		await OnValueChanged(new ConfigItem(""));
		if (_applicationsList.Any())
			await OnValueChanged(_defaultItem);
	}



	// TODO: update list on delete and add refresh button

}